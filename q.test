  > Homework 9  Devices  GET -> "/security/devices": login user 4 times from different browsers, then get device list; status 200; content: device list;  used additional methods: POST => /auth/login;



[{"deviceId": Any<String>, "ip": Any<String>, "lastActiveDate": StringMatching /\d{4}-[01]\d-[0-3]\dT[0-2]\d:[0-5]\d:[0-5]\d\.\d+([+-][0-2]\d:[0-5]\d|Z)/, "title": Any<String>}]

[{"ip":"3.69.49.83","title":"Mozilla/5.0 (X11; Linux x86_64) AppleWebKit/537.36 (KHTML, like Gecko) Chrome/105.0.0.0 Safari/537.36","lastActiveDate":1686653700,"deviceId":"380c1d8b-8447-4aaa-b84a-4cb851238e00"},{"ip":"3.69.49.83","title":"Mozilla/5.0 (X11; Ubuntu; Linux x86_64; rv:105.0) Gecko/20100101 Firefox/103.0","lastActiveDate":1686653700,"deviceId":"759dadfc-6fb4-4a29-a47c-58db44503511"},{"ip":"3.69.49.83","title":"Mozilla/5.0 (X11; Linux x86_64) AppleWebKit/537.36 (KHTML, like Gecko) Chrome/104.0.0.0 Safari/537.36","lastActiveDate":1686653701,"deviceId":"225905eb-ffd6-4baf-91e5-e428f4f28fa1"},{"ip":"3.69.49.83","title":"Mozilla/5.0 (Macintosh; Intel Mac OS X 12_6) AppleWebKit/605.1.15 (KHTML, like Gecko) Version/15.6 Safari/605.1.15","lastActiveDate":1686653701,"deviceId":"5928b7ff-1eb2-4231-8c18-9da0c54e5318"}]

    Wrong entity: {"ip":"3.69.49.83","title":"Mozilla/5.0 (X11; Linux x86_64) AppleWebKit/537.36 (KHTML, like Gecko) Chrome/105.0.0.0 Safari/537.36","lastActiveDate":1686653700,"deviceId":"380c1d8b-8447-4aaa-b84a-4cb851238e00"}

      146 |
      147 |       expect(status).toBe(200);
    > 148 |       expect(devicesList).toBeStrictObjectsArray(securityDeviceSchema);
          |                           ^
      149 |
      150 |       expect(devicesList).toHaveLength(LOGGED_DEVICES_COUNT);
      151 |       expect(devicesList).toStrictEqual(

      at Object.<anonymous> (src/tests/jest/back/describes/devices/devices-describe.ts:148:27)
          at runMicrotasks (<anonymous>)

  > Homework 9  Devices  DELETE -> "/security/devices/:deviceId": should return error if :id from uri param not found; status 404;

    expect(received).not.toBeUndefined()

    Received: undefined

      74 |   getRefreshToken: (): string => {
      75 |     const refreshToken = expect.getState().refreshToken;
    > 76 |     expect(refreshToken).not.toBeUndefined();
         |                              ^
      77 |
      78 |     return refreshToken;
      79 |   },

      at Object.getRefreshToken (src/tests/jest/back/testHelpers/jestState/usersState.ts:76:30)
      at Object.<anonymous> (src/tests/jest/back/describes/devices/devices-describe.ts:188:49)
          at runMicrotasks (<anonymous>)

  > Homework 9  Devices  GET -> "/security/devices", DELETE -> "/security/devices/:deviceId", DELETE -> "security/devices": should return error if auth credentials is incorrect; status 401;

    expect(received).not.toBeUndefined()

    Received: undefined

      74 |   getRefreshToken: (): string => {
      75 |     const refreshToken = expect.getState().refreshToken;
    > 76 |     expect(refreshToken).not.toBeUndefined();
         |                              ^
      77 |
      78 |     return refreshToken;
      79 |   },

      at Object.getRefreshToken (src/tests/jest/back/testHelpers/jestState/usersState.ts:76:30)
      at Object.<anonymous> (src/tests/jest/back/describes/devices/devices-describe.ts:218:49)
          at runMicrotasks (<anonymous>)

  > Homework 9  Devices  DELETE -> "/security/devices/:sessionId":
      Get device list by user1.
      Create user2, login user 2 with the same user-agent header as user 1.
      Try to delete second device by user2 from device list of user1.
      Should return forbidden error
      ; status 403;  used additional methods: GET -> /security/devices, POST -> /users, POST -> /auth/login;

    expect(received).not.toBeUndefined()

    Received: undefined

      74 |   getRefreshToken: (): string => {
      75 |     const refreshToken = expect.getState().refreshToken;
    > 76 |     expect(refreshToken).not.toBeUndefined();
         |                              ^
      77 |
      78 |     return refreshToken;
      79 |   },

      at Object.getRefreshToken (src/tests/jest/back/testHelpers/jestState/usersState.ts:76:30)
      at Object.<anonymous> (src/tests/jest/back/describes/devices/devices-describe.ts:266:49)
          at runMicrotasks (<anonymous>)

  > Homework 9  Devices  POST -> "/auth/refresh-token": should return new 'refresh' and 'access' tokens; status 200; content: new JWT 'access' token, new JWT 'refresh' token in cookie (http only, secure);

    expect(received).not.toBeUndefined()

    Received: undefined

      74 |   getRefreshToken: (): string => {
      75 |     const refreshToken = expect.getState().refreshToken;
    > 76 |     expect(refreshToken).not.toBeUndefined();
         |                              ^
      77 |
      78 |     return refreshToken;
      79 |   },

      at Object.getRefreshToken (src/tests/jest/back/testHelpers/jestState/usersState.ts:76:30)
      at Object.<anonymous> (src/tests/jest/back/describes/refreshToken/refreshToken-describe.ts:137:40)

  > Homework 9  Devices  GET -> "/security/devices": should not change device id after call /auth/refresh-token. LastActiveDate should be changed; status 200; content: device list;

    expect(received).not.toBeUndefined()

    Received: undefined

      74 |   getRefreshToken: (): string => {
      75 |     const refreshToken = expect.getState().refreshToken;
    > 76 |     expect(refreshToken).not.toBeUndefined();
         |                              ^
      77 |
      78 |     return refreshToken;
      79 |   },

      at Object.getRefreshToken (src/tests/jest/back/testHelpers/jestState/usersState.ts:76:30)
      at Object.<anonymous> (src/tests/jest/back/describes/devices/devices-describe.ts:315:49)

  > Homework 9  Devices  DELETE -> "/security/devices/deviceId": should delete device from device list by deviceId; status 204;  used additional methods: GET => /security/devices;

    expect(received).not.toBeUndefined()

    Received: undefined

      74 |   getRefreshToken: (): string => {
      75 |     const refreshToken = expect.getState().refreshToken;
    > 76 |     expect(refreshToken).not.toBeUndefined();
         |                              ^
      77 |
      78 |     return refreshToken;
      79 |   },

      at Object.getRefreshToken (src/tests/jest/back/testHelpers/jestState/usersState.ts:76:30)
      at Object.<anonymous> (src/tests/jest/back/describes/devices/devices-describe.ts:351:49)

  > Homework 9  Devices  GET -> "/security/devices": should return device list without a device logged out; status 204;  used additional methods: POST => /auth/logout;

    expect(received).not.toBeUndefined()

    Received: undefined

      74 |   getRefreshToken: (): string => {
      75 |     const refreshToken = expect.getState().refreshToken;
    > 76 |     expect(refreshToken).not.toBeUndefined();
         |                              ^
      77 |
      78 |     return refreshToken;
      79 |   },

      at Object.getRefreshToken (src/tests/jest/back/testHelpers/jestState/usersState.ts:76:30)
      at Object.<anonymous> (src/tests/jest/back/describes/devices/devices-describe.ts:392:49)

  > Homework 9  Devices  DELETE -> "/security/devices": should delete all other devices from device list; status 204;  used additional methods: GET => /security/devices;

    expect(received).not.toBeUndefined()

    Received: undefined

      74 |   getRefreshToken: (): string => {
      75 |     const refreshToken = expect.getState().refreshToken;
    > 76 |     expect(refreshToken).not.toBeUndefined();
         |                              ^
      77 |
      78 |     return refreshToken;
      79 |   },

      at Object.getRefreshToken (src/tests/jest/back/testHelpers/jestState/usersState.ts:76:30)
      at Object.<anonymous> (src/tests/jest/back/describes/devices/devices-describe.ts:431:49)

  > Homework 9  Ip restriction  POST -> "/auth/registration": should return status code 429 if more than 5 requests were sent within 10 seconds, and 204 after waiting; status 429, 204;

    expect(received).toBe(expected) // Object.is equality

    Expected: 429
    Received: 204

      42 |         method: 'post',
      43 |       });
    > 44 |       expect(statusAfter5Attempts).toBe(429);
         |                                    ^
      45 |
      46 |       await delay(timeout);
      47 |       const statusAfter10secWaiting = await performRequest({

      at Object.<anonymous> (src/tests/jest/back/describes/ipRestriction/ipRestriction.ts:44:36)
          at runMicrotasks (<anonymous>)

  > Homework 9  Ip restriction  POST -> "/auth/login": for a non-existent user, it should return status code 429 if more than 5 requests were sent within 10 seconds, and 401 after waiting; status 429, 401;

    expect(received).toBe(expected) // Object.is equality

    Expected: 429
    Received: 401

      19 |
      20 |   const statusAfterSeveralAttempts = await performRequest({ method: 'post', endpoint, body });
    > 21 |   expect(statusAfterSeveralAttempts).toBe(429);
         |                                      ^
      22 |
      23 |   await delay(delayTime);
      24 |   const statusAfterWaiting = await performRequest({ method: 'post', endpoint, body });

      at performManyAttemptsTestFlow (src/tests/jest/back/describes/ipRestriction/performManyAttemptsTestFlow.ts:21:38)
          at runMicrotasks (<anonymous>)
      at Object.<anonymous> (src/tests/jest/back/describes/ipRestriction/ipRestriction.ts:71:7)

  > Homework 9  Ip restriction  POST -> "/auth/registration-email-resending": should return status code 429 if more than 5 requests were sent within 10 seconds, and 204 after waiting; status 429, 204;

    expect(received).toBe(expected) // Object.is equality

    Expected: 429
    Received: 204

      19 |
      20 |   const statusAfterSeveralAttempts = await performRequest({ method: 'post', endpoint, body });
    > 21 |   expect(statusAfterSeveralAttempts).toBe(429);
         |                                      ^
      22 |
      23 |   await delay(delayTime);
      24 |   const statusAfterWaiting = await performRequest({ method: 'post', endpoint, body });

      at performManyAttemptsTestFlow (src/tests/jest/back/describes/ipRestriction/performManyAttemptsTestFlow.ts:21:38)
          at runMicrotasks (<anonymous>)
      at Object.<anonymous> (src/tests/jest/back/describes/ipRestriction/ipRestriction.ts:92:7)

  > Homework 9  Ip restriction  POST -> "/auth/registration-confirmation": should return status code 429 if more than 5 requests were sent within 10 seconds, and 400 after waiting; status 429, 400;

    expect(received).toBe(expected) // Object.is equality

    Expected: 429
    Received: 400

      19 |
      20 |   const statusAfterSeveralAttempts = await performRequest({ method: 'post', endpoint, body });
    > 21 |   expect(statusAfterSeveralAttempts).toBe(429);
         |                                      ^
      22 |
      23 |   await delay(delayTime);
      24 |   const statusAfterWaiting = await performRequest({ method: 'post', endpoint, body });

      at performManyAttemptsTestFlow (src/tests/jest/back/describes/ipRestriction/performManyAttemptsTestFlow.ts:21:38)
          at runMicrotasks (<anonymous>)
      at Object.<anonymous> (src/tests/jest/back/describes/ipRestriction/ipRestriction.ts:112:7)
