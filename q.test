  > Homework 6  Login  POST -> "/auth/login": should sign in user; status 200; content: JWT token;

    expect(received).toEqual(expected) // deep equality

    Expected: StringContaining "."
    Received: undefined

      41 |
      42 |       expect(loginUserResponseStatus).toBe(200);
    > 43 |       expect(loginUserResponseData.accessToken).toEqual(expect.stringContaining('.'));
         |                                                 ^
      44 |
      45 |       tokensState.setAccessToken(loginUserResponseData.accessToken);
      46 |     }

      at Object.<anonymous> (src/tests/jest/back/describes/usersApi/login-V2-describe.ts:43:49)
          at runMicrotasks (<anonymous>)

  > Homework 6  Comments for posts with auth  POST -> "/posts/:postId/comments": should create new comment; status 201; content: created comment;  used additional methods: POST -> /blogs, POST -> /posts, GET -> /comments/:commentId;

    expect(received).not.toBeUndefined()

    Received: undefined

      68 |   getAccessToken: (): string => {
      69 |     const accessToken = expect.getState().accessToken;
    > 70 |     expect(accessToken).not.toBeUndefined();
         |                             ^
      71 |
      72 |     return accessToken;
      73 |   },

      at Object.getAccessToken (src/tests/jest/back/testHelpers/jestState/usersState.ts:70:29)
      at Object.<anonymous> (src/tests/jest/back/describes/comments/comments-V2-describe.ts:86:33)
          at runMicrotasks (<anonymous>)

  > Homework 6  Comments for posts with auth  GET -> "/posts/:postId/comments": should return status 200; content: comments with pagination;  used additional methods: POST -> /blogs, POST -> /posts, POST -> /comments;

    expect(received).not.toBeUndefined()

    Received: undefined

      68 |   getAccessToken: (): string => {
      69 |     const accessToken = expect.getState().accessToken;
    > 70 |     expect(accessToken).not.toBeUndefined();
         |                             ^
      71 |
      72 |     return accessToken;
      73 |   },

      at Object.getAccessToken (src/tests/jest/back/testHelpers/jestState/usersState.ts:70:29)
      at Object.<anonymous> (src/tests/jest/back/describes/comments/comments-V2-describe.ts:160:33)
          at runMicrotasks (<anonymous>)

  > Homework 6  Comments for posts with auth  DELETE -> "/comments/:id": should delete comment by id; status 204;  used additional methods: POST -> /blogs, POST -> /posts, GET -> /comments/:id;

    expect(received).not.toBeUndefined()

    Received: undefined

      68 |   getAccessToken: (): string => {
      69 |     const accessToken = expect.getState().accessToken;
    > 70 |     expect(accessToken).not.toBeUndefined();
         |                             ^
      71 |
      72 |     return accessToken;
      73 |   },

      at Object.getAccessToken (src/tests/jest/back/testHelpers/jestState/usersState.ts:70:29)
      at Object.<anonymous> (src/tests/jest/back/describes/comments/comments-V2-describe.ts:224:33)
          at runMicrotasks (<anonymous>)

  > Homework 6  Comments for posts with auth  PUT -> "/comments/:commentId": should update comment by id; status 204;  used additional methods: POST -> /blogs, POST -> /posts, POST -> /posts/:postId/comments, GET -> /comments/:commentId;

    expect(received).not.toBeUndefined()

    Received: undefined

      68 |   getAccessToken: (): string => {
      69 |     const accessToken = expect.getState().accessToken;
    > 70 |     expect(accessToken).not.toBeUndefined();
         |                             ^
      71 |
      72 |     return accessToken;
      73 |   },

      at Object.getAccessToken (src/tests/jest/back/testHelpers/jestState/usersState.ts:70:29)
      at Object.<anonymous> (src/tests/jest/back/describes/comments/comments-V2-describe.ts:121:33)
          at runMicrotasks (<anonymous>)

  > Homework 6  Comments for posts with auth  GET -> "comments/:commentsId": should return status 200; content: comment by id;  used additional methods: POST -> /blogs, POST -> /posts, POST -> /posts/:postId/comments;

    expect(received).not.toBeUndefined()

    Received: undefined

      68 |   getAccessToken: (): string => {
      69 |     const accessToken = expect.getState().accessToken;
    > 70 |     expect(accessToken).not.toBeUndefined();
         |                             ^
      71 |
      72 |     return accessToken;
      73 |   },

      at Object.getAccessToken (src/tests/jest/back/testHelpers/jestState/usersState.ts:70:29)
      at Object.<anonymous> (src/tests/jest/back/describes/comments/comments-V2-describe.ts:196:33)
          at runMicrotasks (<anonymous>)

  > Homework 6  Comments for posts with auth  DELETE, PUT -> "/comments/:id", GET, POST -> "posts/:postId/comments": should return error if :id from uri param not found; status 404;

    expect(received).not.toBeUndefined()

    Received: undefined

      68 |   getAccessToken: (): string => {
      69 |     const accessToken = expect.getState().accessToken;
    > 70 |     expect(accessToken).not.toBeUndefined();
         |                             ^
      71 |
      72 |     return accessToken;
      73 |   },

      at Object.getAccessToken (src/tests/jest/back/testHelpers/jestState/usersState.ts:70:29)
      at Object.<anonymous> (src/tests/jest/back/describes/comments/comments-V2-describe.ts:247:33)
          at runMicrotasks (<anonymous>)

  > Homework 6  Comments for posts with auth  DELETE, PUT -> "/comments/:id", POST -> "posts/:postId/comments": should return error if auth credentials is incorrect; status 401;  used additional methods: POST -> /blogs, POST -> /posts, POST -> /comments;

    expect(received).not.toBeUndefined()

    Received: undefined

      68 |   getAccessToken: (): string => {
      69 |     const accessToken = expect.getState().accessToken;
    > 70 |     expect(accessToken).not.toBeUndefined();
         |                             ^
      71 |
      72 |     return accessToken;
      73 |   },

      at Object.getAccessToken (src/tests/jest/back/testHelpers/jestState/usersState.ts:70:29)
      at Object.<anonymous> (src/tests/jest/back/describes/comments/comments-V2-describe.ts:298:33)
          at runMicrotasks (<anonymous>)

  > Homework 6  Comments for posts with auth  PUT, DELETE -> "/comments/:id": should return error if access denied; status 403;  used additional methods: POST -> /users;

    expect(received).not.toBeUndefined()

    Received: undefined

      68 |   getAccessToken: (): string => {
      69 |     const accessToken = expect.getState().accessToken;
    > 70 |     expect(accessToken).not.toBeUndefined();
         |                             ^
      71 |
      72 |     return accessToken;
      73 |   },

      at Object.getAccessToken (src/tests/jest/back/testHelpers/jestState/usersState.ts:70:29)
      at Object.<anonymous> (src/tests/jest/back/describes/comments/comments-V2-describe.ts:338:33)
          at runMicrotasks (<anonymous>)

  > Homework 6  Comments for posts with auth  Comments body validation  POST -> "/posts/:postId/comments": should return error if passed body is incorrect; status 400;  used additional methods: POST -> /blogs, POST -> /posts;

    expect(received).not.toBeUndefined()

    Received: undefined

      68 |   getAccessToken: (): string => {
      69 |     const accessToken = expect.getState().accessToken;
    > 70 |     expect(accessToken).not.toBeUndefined();
         |                             ^
      71 |
      72 |     return accessToken;
      73 |   },

      at Object.getAccessToken (src/tests/jest/back/testHelpers/jestState/usersState.ts:70:29)
      at Object.<anonymous> (src/tests/jest/back/describes/comments/comments-body-validatin-v2-describe.ts:45:33)
          at runMicrotasks (<anonymous>)

  > Homework 6  Comments for posts with auth  Comments body validation  PUT -> "/comments/:commentId": should return error if passed body is incorrect; status 400;  used additional methods: POST -> /blogs, POST -> /posts;

    expect(received).not.toBeUndefined()

    Received: undefined

      68 |   getAccessToken: (): string => {
      69 |     const accessToken = expect.getState().accessToken;
    > 70 |     expect(accessToken).not.toBeUndefined();
         |                             ^
      71 |
      72 |     return accessToken;
      73 |   },

      at Object.getAccessToken (src/tests/jest/back/testHelpers/jestState/usersState.ts:70:29)
      at Object.<anonymous> (src/tests/jest/back/describes/comments/comments-body-validatin-v2-describe.ts:70:33)
          at runMicrotasks (<anonymous>)
