  > Homework 3  Blogs api  POST -> "/blogs": should create new blog; status 201; content: created blog;  used additional methods: GET -> /blogs/:id;

    expect(received).toEqual(expected) // deep equality

    - Expected  - 0
    + Received  + 1

    @@ -1,6 +1,7 @@
      Object {
    +   "_id": "645cbe137ec5e9027afedc1b",
        "createdAt": StringMatching /\d{4}-[01]\d-[0-3]\dT[0-2]\d:[0-5]\d:[0-5]\d\.\d+([+-][0-2]\d:[0-5]\d|Z)/,
        "description": Any<String>,
        "id": Any<String>,
        "isMembership": false,
        "name": Any<String>,

      63 |   expectedStatus = 201,
      64 | }: IPerformCreateTestFlowPayload<T>) => {
    > 65 |   expect(createEntityResponseData).toEqual(entitySchema);
         |                                    ^
      66 |   expect(createEntityResponseStatus).toBe(expectedStatus);
      67 |
      68 |   const { data: getByIdResponseData } = await axiosInstance

      at performPOSTTestFlow (src/tests/jest/back/testHelpers/performTestsFlow/performTestsFlow.ts:65:36)
      at Object.<anonymous> (src/tests/jest/back/describes/blogs/blogs-describe.ts:149:32)
          at runMicrotasks (<anonymous>)

  > Homework 3  Blogs api  GET -> "blogs/:id": should return status 200; content: blog by id;  used additional methods: POST -> /blogs;

    expect(received).toEqual(expected) // deep equality

    - Expected  - 0
    + Received  + 1

    @@ -1,6 +1,7 @@
      Object {
    +   "_id": "645cbe147ec5e9027afedc1c",
        "createdAt": StringMatching /\d{4}-[01]\d-[0-3]\dT[0-2]\d:[0-5]\d:[0-5]\d\.\d+([+-][0-2]\d:[0-5]\d|Z)/,
        "description": Any<String>,
        "id": Any<String>,
        "isMembership": false,
        "name": Any<String>,

      84 |
      85 |   expect(getByIdResponseStatus).toBe(200);
    > 86 |   expect(getByIdResponseData).toEqual(entitySchema);
         |                               ^
      87 |   expect(getByIdResponseData).toStrictEqual(createEntityResponseData);
      88 | };
      89 |

      at performGETByIdTestFlow (src/tests/jest/back/testHelpers/performTestsFlow/performTestsFlow.ts:86:31)
          at runMicrotasks (<anonymous>)
      at Object.<anonymous> (src/tests/jest/back/describes/blogs/blogs-describe.ts:49:7)

  > Homework 3  Blogs api  GET -> "/blogs": should return status 200; content: blogs array;  used additional methods: POST -> /blogs;



    Expected: ArrayContaining [{"createdAt": StringMatching /\d{4}-[01]\d-[0-3]\dT[0-2]\d:[0-5]\d:[0-5]\d\.\d+([+-][0-2]\d:[0-5]\d|Z)/, "description": Any<String>, "id": Any<String>, "isMembership": false, "name": Any<String>, "websiteUrl": Any<String>}]

    Received: [{"_id":"645cbe137ec5e9027afedc1a","id":"1683799571501","createdAt":"2023-05-11T10:06:11.501Z","isMembership":false,"name":"new blog","websiteUrl":"https://someurl.com","description":"description"},{"_id":"645cbe137ec5e9027afedc1b","id":"1683799571974","createdAt":"2023-05-11T10:06:11.974Z","isMembership":false,"name":"new blog","websiteUrl":"https://someurl.com","description":"description"},{"_id":"645cbe147ec5e9027afedc1c","id":"1683799572212","createdAt":"2023-05-11T10:06:12.212Z","isMembership":false,"name":"new blog","websiteUrl":"https://someurl.com","description":"description"},{"_id":"645cbe147ec5e9027afedc1d","id":"1683799572534","createdAt":"2023-05-11T10:06:12.534Z","isMembership":false,"name":"new blog","websiteUrl":"https://someurl.com","description":"description"}]

    Wrong entity: {"_id":"645cbe137ec5e9027afedc1a","id":"1683799571501","createdAt":"2023-05-11T10:06:11.501Z","isMembership":false,"name":"new blog","websiteUrl":"https://someurl.com","description":"description"}

      146 |     await axiosInstance.get<T>(getAllEntitiesEndpoint).catch((error) => handleTestError(error));
      147 |
    > 148 |   expect(getAllEntitiesResponseData).toBeStrictObjectsArray(entitySchema);
          |                                      ^
      149 |   expect(getAllEntitiesResponseStatus).toBe(200);
      150 | };
      151 |

      at performGETTestFlow (src/tests/jest/back/testHelpers/performTestsFlow/performTestsFlow.ts:148:38)
          at runMicrotasks (<anonymous>)
      at Object.<anonymous> (src/tests/jest/back/describes/blogs/blogs-describe.ts:127:7)

  > Homework 3  Posts api  POST -> "/posts": should create new post for an existing blog; status 201; content: created post;  used additional methods: POST -> /blogs, GET -> /posts/:id;



    Expected: success response

    Received: Request failed with status code 400

    Config:
     url: posts
     method: post
     response status: 400
     request body: {"content":"new post content","shortDescription":"description","title":"post title","blogId":"1683799576991"}
     response data: {"errorsMessages":[{"message":"id not found in blog","field":"blogId"}]}

      22 |     };
      23 |
    > 24 |     expect(mappedError).printError(description);
         |                         ^
      25 |   }
      26 |
      27 |   throw new Error(error.message);

      at handleTestError (src/tests/jest/back/testHelpers/handleTestError.ts:24:25)
      at src/tests/jest/back/describes/posts/posts-describe.ts:98:41
          at runMicrotasks (<anonymous>)
      at Object.<anonymous> (src/tests/jest/back/describes/posts/posts-describe.ts:95:64)

  > Homework 3  Posts api  GET -> "/posts/:id": should return status 200; content: post by id;  used additional methods: POST -> /blogs, POST -> /posts;



    Expected: success response

    Received: Request failed with status code 400

    Config:
     url: posts
     method: post
     response status: 400
     request body: {"content":"new post content","shortDescription":"description","title":"post title","blogId":"1683799577298"}
     response data: {"errorsMessages":[{"message":"id not found in blog","field":"blogId"}]}

      22 |     };
      23 |
    > 24 |     expect(mappedError).printError(description);
         |                         ^
      25 |   }
      26 |
      27 |   throw new Error(error.message);

      at handleTestError (src/tests/jest/back/testHelpers/handleTestError.ts:24:25)
      at src/tests/jest/back/describes/posts/posts-describe.ts:130:41
          at runMicrotasks (<anonymous>)
      at Object.<anonymous> (src/tests/jest/back/describes/posts/posts-describe.ts:127:37)

  > Homework 3  Posts api  GET -> "/posts": should return status 200; content: posts array;  used additional methods: POST -> /blogs, POST -> /posts;



    Expected: success response

    Received: Request failed with status code 400

    Config:
     url: posts
     method: post
     response status: 400
     request body: {"content":"new post content","shortDescription":"description","title":"post title","blogId":"1683799577642"}
     response data: {"errorsMessages":[{"message":"id not found in blog","field":"blogId"}]}

      22 |     };
      23 |
    > 24 |     expect(mappedError).printError(description);
         |                         ^
      25 |   }
      26 |
      27 |   throw new Error(error.message);

      at handleTestError (src/tests/jest/back/testHelpers/handleTestError.ts:24:25)
      at src/tests/jest/back/describes/posts/posts-describe.ts:68:75
          at runMicrotasks (<anonymous>)
      at Object.<anonymous> (src/tests/jest/back/describes/posts/posts-describe.ts:68:7)

  > Homework 3  Posts api  PUT -> "/posts/:id": should update post by id; status 204;  used additional methods: POST -> /blogs, POST -> /posts, GET -> /posts/:id;



    Expected: success response

    Received: Request failed with status code 400

    Config:
     url: posts
     method: post
     response status: 400
     request body: {"content":"new post content","shortDescription":"description","title":"post title","blogId":"1683799577907"}
     response data: {"errorsMessages":[{"message":"id not found in blog","field":"blogId"}]}

      22 |     };
      23 |
    > 24 |     expect(mappedError).printError(description);
         |                         ^
      25 |   }
      26 |
      27 |   throw new Error(error.message);

      at handleTestError (src/tests/jest/back/testHelpers/handleTestError.ts:24:25)
      at src/tests/jest/back/describes/posts/posts-describe.ts:161:41
          at runMicrotasks (<anonymous>)
      at Object.<anonymous> (src/tests/jest/back/describes/posts/posts-describe.ts:158:37)

  > Homework 3  Posts api  DELETE -> "/posts/:id": should delete post by id; status 204;  used additional methods: POST -> /blogs, POST -> /posts, GET -> /posts/:id;



    Expected: success response

    Received: Request failed with status code 400

    Config:
     url: posts
     method: post
     response status: 400
     request body: {"content":"new post content","shortDescription":"description","title":"post title","blogId":"1683799578191"}
     response data: {"errorsMessages":[{"message":"id not found in blog","field":"blogId"}]}

      22 |     };
      23 |
    > 24 |     expect(mappedError).printError(description);
         |                         ^
      25 |   }
      26 |
      27 |   throw new Error(error.message);

      at handleTestError (src/tests/jest/back/testHelpers/handleTestError.ts:24:25)
      at src/tests/jest/back/describes/posts/posts-describe.ts:201:41
          at runMicrotasks (<anonymous>)
      at Object.<anonymous> (src/tests/jest/back/describes/posts/posts-describe.ts:198:37)

  > Homework 3  Posts api  PUT, DELETE, GET -> "/posts/:id": should return error if :id from uri param not found; status 404;  used additional methods: POST -> /blogs;



    Tested case params:
     endpoint: posts/602afe92-7d97-4395-b1b9-6cf98b351bbe,
     method: PUT,
     headers: {"Authorization":"Basic YWRtaW46cXdlcnR5"},
    body: {"content":"new post content","shortDescription":"description","title":"post title","blogId":"1683799578465"}

    Expected status: 404

    Received status: 400

      49 |       }
      50 |
    > 51 |       expect(status).toBeWith4xxStatus(expectedStatusCode, {
         |                      ^
      52 |         headers,
      53 |         endpoint,
      54 |         method,

      at performEndpointErrorChecker (src/tests/jest/back/testHelpers/performCheckers.ts:51:22)
          at runMicrotasks (<anonymous>)
      at performNotFoundTestFlow (src/tests/jest/back/testHelpers/performTestsFlow/performTestsFlow.ts:175:3)
      at Object.<anonymous> (src/tests/jest/back/describes/posts/posts-describe.ts:225:7)

  > Homework 3  Posts api  PUT, POST, DELETE -> "/posts": should return error if auth credentials is incorrect; status 401;  used additional methods: POST -> /blogs;



    Expected: success response

    Received: Request failed with status code 400

    Config:
     url: posts
     method: post
     response status: 400
     request body: {"content":"new post content","shortDescription":"description","title":"post title","blogId":"1683799578984"}
     response data: {"errorsMessages":[{"message":"id not found in blog","field":"blogId"}]}

      22 |     };
      23 |
    > 24 |     expect(mappedError).printError(description);
         |                         ^
      25 |   }
      26 |
      27 |   throw new Error(error.message);

      at handleTestError (src/tests/jest/back/testHelpers/handleTestError.ts:24:25)
      at src/tests/jest/back/testHelpers/performTestsFlow/performTestsFlow.ts:189:38
          at runMicrotasks (<anonymous>)
      at performAuthTestFlow (src/tests/jest/back/testHelpers/performTestsFlow/performTestsFlow.ts:184:46)
      at Object.<anonymous> (src/tests/jest/back/describes/posts/posts-describe.ts:247:7)

  > Homework 3  Posts api  Post body validation  POST -> "/posts": should return error if passed body is incorrect; status 400;  used additional methods: POST -> /blogs;



    Tested endpoint: posts

    Tested method: POST

    Expected status: 400

    Received status: 400

    Passed body: {"title":"length_31-DrmM8lHeNjSykwSzQ7Her","content":"valid","blogId":"1683799579515"}

    Expected data: { errorsMessages: [{ message: Any<String>, field: "shortDescription" }, { message: Any<String>, field: "title" }] }

    Received data: {"errorsMessages":[{"message":"Invalid value","field":"title"},{"message":"Invalid value","field":"shortDescription"},{"message":"id not found in blog","field":"blogId"}]}

      40 |     }
      41 |
    > 42 |     expect(response).toBeError(400, incorrectFields, requestBody, {
         |                      ^
      43 |       endpoint: url,
      44 |       method,
      45 |     });

      at performTestsWithIncorrectBody (src/tests/jest/back/testHelpers/performTestsWithIncorrectBody.ts:42:22)
          at runMicrotasks (<anonymous>)
      at Object.<anonymous> (src/tests/jest/back/describes/posts/posts-validation-describe.ts:83:7)

  > Homework 3  Posts api  Post body validation  PUT -> "/posts": should return error if passed body is incorrect; status 400;  used additional methods: POST -> /blogs, POST -> /posts;



    Expected: success response

    Received: Request failed with status code 400

    Config:
     url: posts
     method: post
     response status: 400
     request body: {"content":"new post content","shortDescription":"description","title":"post title","blogId":"1683799579824"}
     response data: {"errorsMessages":[{"message":"id not found in blog","field":"blogId"}]}

      22 |     };
      23 |
    > 24 |     expect(mappedError).printError(description);
         |                         ^
      25 |   }
      26 |
      27 |   throw new Error(error.message);

      at handleTestError (src/tests/jest/back/testHelpers/handleTestError.ts:24:25)
      at src/tests/jest/back/describes/posts/posts-validation-describe.ts:115:41
          at runMicrotasks (<anonymous>)
      at Object.<anonymous> (src/tests/jest/back/describes/posts/posts-validation-describe.ts:109:37)
