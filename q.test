  > Homework 9  Devices  DELETE -> "/security/devices/:deviceId": should return error if :id from uri param not found; status 404;



    Tested case params:
     endpoint: security/devices/602afe92-7d97-4395-b1b9-6cf98b351bbe,
     method: DELETE,
     headers: {"cookie":"refreshToken=eyJhbGciOiJIUzI1NiIsInR5cCI6IkpXVCJ9.eyJ1c2VySWQiOiJjZWQxYWI3My0xNmIyLTQxYTItYjMwZS1jMzg0YThkMGQ2ZWQiLCJkZXZpY2VJZCI6ImMzMmE2OGQ2LWEwNmUtNGJjZi1iZTBlLWVhOTUwM2FhOWU2NCIsImlhdCI6MTY4NjcxNDI4MSwiZXhwIjoxNjg2NzE0MzAxfQ.gXNPdVUst7mfaYLfQOHN5wEvcJJy58gV0Xgv3K0m2-I;"},

    Expected status: 404

    Received status: 403

      49 |       }
      50 |
    > 51 |       expect(status).toBeWith4xxStatus(expectedStatusCode, {
         |                      ^
      52 |         headers,
      53 |         endpoint,
      54 |         method,

      at performEndpointErrorChecker (src/tests/jest/back/testHelpers/performCheckers.ts:51:22)
          at runMicrotasks (<anonymous>)
      at Object.<anonymous> (src/tests/jest/back/describes/devices/devices-describe.ts:206:7)

  > Homework 9  Devices  GET -> "/security/devices": should not change device id after call /auth/refresh-token. LastActiveDate should be changed; status 200; content: device list;

    expect(received).toHaveLength(expected)

    Expected length: 4
    Received length: 5
    Received array:  [{"deviceId": "c32a68d6-a06e-4bcf-be0e-ea9503aa9e64", "ip": "3.69.49.83", "lastActiveDate": "2023-06-14T03:44:41.000Z", "title": "Mozilla/5.0 (X11; Linux x86_64) AppleWebKit/537.36 (KHTML, like Gecko) Chrome/105.0.0.0 Safari/537.36"}, {"deviceId": "2b32d9ce-e959-48e8-9acd-3eb7cdc7f841", "ip": "3.69.49.83", "lastActiveDate": "2023-06-14T03:44:42.000Z", "title": "Mozilla/5.0 (X11; Ubuntu; Linux x86_64; rv:105.0) Gecko/20100101 Firefox/103.0"}, {"deviceId": "9c9a58cc-b437-4037-bed7-eadb79100688", "ip": "3.69.49.83", "lastActiveDate": "2023-06-14T03:44:42.000Z", "title": "Mozilla/5.0 (X11; Linux x86_64) AppleWebKit/537.36 (KHTML, like Gecko) Chrome/104.0.0.0 Safari/537.36"}, {"deviceId": "97647514-d143-48f4-90cf-8a8430dcd5bb", "ip": "3.69.49.83", "lastActiveDate": "2023-06-14T03:44:42.000Z", "title": "Mozilla/5.0 (Macintosh; Intel Mac OS X 12_6) AppleWebKit/605.1.15 (KHTML, like Gecko) Version/15.6 Safari/605.1.15"}, {"deviceId": "c10f3e73-21c0-44e6-9138-2af64d86cf61", "ip": "3.69.49.83", "lastActiveDate": "2023-06-14T03:44:45.000Z", "title": "axios/1.3.4"}]

      323 |
      324 |       expect(devicesList).toBeStrictObjectsArray(securityDeviceSchema);
    > 325 |       expect(devicesList).toHaveLength(LOGGED_DEVICES_COUNT);
          |                           ^
      326 |       expect(devicesList).toStrictEqual(
      327 |         expect.arrayContaining([
      328 |           expect.objectContaining({ deviceId: chrome105DeviceIdBeforeRefresh }),

      at Object.<anonymous> (src/tests/jest/back/describes/devices/devices-describe.ts:325:27)
          at runMicrotasks (<anonymous>)

  > Homework 9  Devices  DELETE -> "/security/devices/deviceId": should delete device from device list by deviceId; status 204;  used additional methods: GET => /security/devices;



    Expected: success response

    Received: Request failed with status code 403

    Config:
     url: security/devices/2b32d9ce-e959-48e8-9acd-3eb7cdc7f841
     method: delete
     response status: 403
     request body: undefined
     response data: "Forbidden"

      22 |     };
      23 |
    > 24 |     expect(mappedError).printError(description);
         |                         ^
      25 |   }
      26 |
      27 |   throw new Error(error.message);

      at handleTestError (src/tests/jest/back/testHelpers/handleTestError.ts:24:25)
      at src/tests/jest/back/describes/devices/devices-describe.ts:363:41
          at runMicrotasks (<anonymous>)
      at Object.<anonymous> (src/tests/jest/back/describes/devices/devices-describe.ts:360:50)

  > Homework 9  Devices  DELETE -> "/security/devices": should delete all other devices from device list; status 204;  used additional methods: GET => /security/devices;



    Expected: success response

    Received: Request failed with status code 401

    Config:
     url: security/devices
     method: get
     response status: 401
     request body: undefined
     response data: "Unauthorized"

      22 |     };
      23 |
    > 24 |     expect(mappedError).printError(description);
         |                         ^
      25 |   }
      26 |
      27 |   throw new Error(error.message);

      at handleTestError (src/tests/jest/back/testHelpers/handleTestError.ts:24:25)
      at src/tests/jest/back/describes/devices/devices-describe.ts:442:35
          at runMicrotasks (<anonymous>)
      at Object.<anonymous> (src/tests/jest/back/describes/devices/devices-describe.ts:441:48)

  > Homework 9  Ip restriction  POST -> "/auth/registration": should return status code 429 if more than 5 requests were sent within 10 seconds, and 204 after waiting; status 429, 204;

    expect(received).toBe(expected) // Object.is equality

    Expected: 429
    Received: 204

      42 |         method: 'post',
      43 |       });
    > 44 |       expect(statusAfter5Attempts).toBe(429);
         |                                    ^
      45 |
      46 |       await delay(timeout);
      47 |       const statusAfter10secWaiting = await performRequest({

      at Object.<anonymous> (src/tests/jest/back/describes/ipRestriction/ipRestriction.ts:44:36)

  > Homework 9  Ip restriction  POST -> "/auth/login": for a non-existent user, it should return status code 429 if more than 5 requests were sent within 10 seconds, and 401 after waiting; status 429, 401;

    expect(received).toBe(expected) // Object.is equality

    Expected: 429
    Received: 401

      19 |
      20 |   const statusAfterSeveralAttempts = await performRequest({ method: 'post', endpoint, body });
    > 21 |   expect(statusAfterSeveralAttempts).toBe(429);
         |                                      ^
      22 |
      23 |   await delay(delayTime);
      24 |   const statusAfterWaiting = await performRequest({ method: 'post', endpoint, body });

      at performManyAttemptsTestFlow (src/tests/jest/back/describes/ipRestriction/performManyAttemptsTestFlow.ts:21:38)
      at Object.<anonymous> (src/tests/jest/back/describes/ipRestriction/ipRestriction.ts:71:7)

  > Homework 9  Ip restriction  POST -> "/auth/registration-email-resending": should return status code 429 if more than 5 requests were sent within 10 seconds, and 204 after waiting; status 429, 204;

    expect(received).toBe(expected) // Object.is equality

    Expected: 429
    Received: 204

      19 |
      20 |   const statusAfterSeveralAttempts = await performRequest({ method: 'post', endpoint, body });
    > 21 |   expect(statusAfterSeveralAttempts).toBe(429);
         |                                      ^
      22 |
      23 |   await delay(delayTime);
      24 |   const statusAfterWaiting = await performRequest({ method: 'post', endpoint, body });

      at performManyAttemptsTestFlow (src/tests/jest/back/describes/ipRestriction/performManyAttemptsTestFlow.ts:21:38)
      at Object.<anonymous> (src/tests/jest/back/describes/ipRestriction/ipRestriction.ts:92:7)

  > Homework 9  Ip restriction  POST -> "/auth/registration-confirmation": should return status code 429 if more than 5 requests were sent within 10 seconds, and 400 after waiting; status 429, 400;

    expect(received).toBe(expected) // Object.is equality

    Expected: 429
    Received: 400

      19 |
      20 |   const statusAfterSeveralAttempts = await performRequest({ method: 'post', endpoint, body });
    > 21 |   expect(statusAfterSeveralAttempts).toBe(429);
         |                                      ^
      22 |
      23 |   await delay(delayTime);
      24 |   const statusAfterWaiting = await performRequest({ method: 'post', endpoint, body });

      at performManyAttemptsTestFlow (src/tests/jest/back/describes/ipRestriction/performManyAttemptsTestFlow.ts:21:38)
      at Object.<anonymous> (src/tests/jest/back/describes/ipRestriction/ipRestriction.ts:112:7)
