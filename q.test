  > Homework 11
  Comment likes
  POST -> "/posts/:postId/comments": should create new comment;
  status 201; content: created comment;
  used additional methods: POST -> /blogs,
  POST -> /posts,
  GET -> /comments/:commentId;



    Expected: success response

    Received: Request failed with status code 401

    Config:
     url: comments/1687869682817
     method: get
     response status: 401
     request body: undefined
     response data: "Unauthorized"

      22 |     };
      23 |
    > 24 |     expect(mappedError).printError(description);
         |                         ^
      25 |   }
      26 |
      27 |   throw new Error(error.message);

      at handleTestError (src/tests/jest/back/testHelpers/handleTestError.ts:24:25)
      at src/tests/jest/back/testHelpers/performTestsFlow/performTestsFlow.ts:70:38
      at performPOSTTestFlow (src/tests/jest/back/testHelpers/performTestsFlow/performTestsFlow.ts:68:41)
      at Object.<anonymous> (src/tests/jest/back/describes/comments/comments-V2-describe.ts:97:7)

  > Homework 11  Comment likes  GET -> "comments/:commentsId": should return status 200; content: comment by id;  used additional methods: POST -> /blogs, POST -> /posts, POST -> /posts/:postId/comments;



    Expected: success response

    Received: Request failed with status code 401

    Config:
     url: comments/1687869683896
     method: get
     response status: 401
     request body: undefined
     response data: "Unauthorized"

      22 |     };
      23 |
    > 24 |     expect(mappedError).printError(description);
         |                         ^
      25 |   }
      26 |
      27 |   throw new Error(error.message);

      at handleTestError (src/tests/jest/back/testHelpers/handleTestError.ts:24:25)
      at src/tests/jest/back/testHelpers/performTestsFlow/performTestsFlow.ts:83:38
      at performGETByIdTestFlow (src/tests/jest/back/testHelpers/performTestsFlow/performTestsFlow.ts:81:72)
      at Object.<anonymous> (src/tests/jest/back/describes/comments/comments-V2-describe.ts:202:7)

  > Homework 11  Comment likes  PUT -> "/comments/:commentId/like-status": should return error if :id from uri param not found; status 404;



    Tested case params:
     endpoint: comments/602afe92-7d97-4395-b1b9-6cf98b351bbe/like-status,
     method: PUT,
     headers: {"Authorization":"Bearer eyJhbGciOiJIUzI1NiIsInR5cCI6IkpXVCJ9.eyJ1c2VySWQiOiIyNDQxNjdlNC1jOGI4LTQ1YmQtYTI2YS1lOTkyNGM0ZDU4OGQiLCJpYXQiOjE2ODc4Njk2ODIsImV4cCI6MTY4Nzg3MDY4Mn0.cXVN3J_hbuaA-hAgjFNcj3phq9PAuGYS7yuaC5G2v_I"},
    body: {"likeStatus":"None"}

    Expected status: 404

    Received status: 204

      49 |       }
      50 |
    > 51 |       expect(status).toBeWith4xxStatus(expectedStatusCode, {
         |                      ^
      52 |         headers,
      53 |         endpoint,
      54 |         method,

      at performEndpointErrorChecker (src/tests/jest/back/testHelpers/performCheckers.ts:51:22)
      at Object.<anonymous> (src/tests/jest/back/describes/likes/commentsLikes-describe-v2.ts:328:7)

  > Homework 11  Comment likes  GET -> "/comments/:commentId": get comment by unauthorized user. Should return liked comment with 'myStatus: None'; status 204;  used additional methods: POST => /blogs, POST => /posts, POST => /posts/:postId/comments, PUT => /comments/:commentId/like-status;



    Expected: success response

    Received: Request failed with status code 401

    Config:
     url: comments/1687869685951
     method: get
     response status: 401
     request body: undefined
     response data: "Unauthorized"

      22 |     };
      23 |
    > 24 |     expect(mappedError).printError(description);
         |                         ^
      25 |   }
      26 |
      27 |   throw new Error(error.message);

      at handleTestError (src/tests/jest/back/testHelpers/handleTestError.ts:24:25)
      at src/tests/jest/back/testHelpers/performTestsFlow/performTestLikesFlow.ts:175:38
      at performGetLikeByUnauthorizedUser (src/tests/jest/back/testHelpers/performTestsFlow/performTestLikesFlow.ts:173:34)
      at Object.<anonymous> (src/tests/jest/back/describes/likes/commentsLikes-describe-v2.ts:354:7)

  > Homework 11  Comment likes  PUT -> "/comments/:commentId/like-status": create comment then:
   like the comment by user 1, user 2, user 3, user 4.
   get the comment after each like by user 1.
   ; status 204;  used additional methods: POST => /blogs, POST => /posts, POST => /posts/:postId/comments, GET => /comments/:id;

    expect(received).toStrictEqual(expected) // deep equality

    - Expected  - 0
    + Received  + 1

    @@ -9,6 +9,7 @@
        "likesInfo": Object {
          "dislikesCount": 0,
          "likesCount": 1,
          "myStatus": "Like",
        },
    +   "postId": "1687869693775",
      }

      110 |       .catch((error) => handleTestError(error));
      111 |
    > 112 |     expect(itemAfterLikeAction).toStrictEqual(expectedItemWithLike);
          |                                 ^
      113 |   }
      114 | };
      115 |

      at performLikeTestFlow (src/tests/jest/back/testHelpers/performTestsFlow/performTestLikesFlow.ts:112:33)
      at Object.<anonymous> (src/tests/jest/back/describes/likes/commentsLikes-describe-v2.ts:83:7)

  > Homework 11  Comment likes  PUT -> "/comments/:commentId/like-status": create comment then:
   dislike the comment by user 1, user 2;
   like the comment by user 3;
   get the comment after each like by user 1; status 204;  used additional methods: POST => /blogs, POST => /posts, POST => /posts/:postId/comments, GET => /comments/:id;

    expect(received).toStrictEqual(expected) // deep equality

    - Expected  - 1
    + Received  + 2

    @@ -7,8 +7,9 @@
        "createdAt": "2023-06-27T12:41:35.324Z",
        "id": "1687869695324",
        "likesInfo": Object {
          "dislikesCount": 1,
          "likesCount": 0,
    -     "myStatus": "Dislike",
    +     "myStatus": "Like",
        },
    +   "postId": "1687869694990",
      }

      110 |       .catch((error) => handleTestError(error));
      111 |
    > 112 |     expect(itemAfterLikeAction).toStrictEqual(expectedItemWithLike);
          |                                 ^
      113 |   }
      114 | };
      115 |

      at performLikeTestFlow (src/tests/jest/back/testHelpers/performTestsFlow/performTestLikesFlow.ts:112:33)
      at Object.<anonymous> (src/tests/jest/back/describes/likes/commentsLikes-describe-v2.ts:114:7)

  > Homework 11  Comment likes  PUT -> "/comments/:commentId/like-status": create comment then:
   like the comment twice by user 1;
   get the comment after each like by user 1.
   Should increase like's count once; status 204;  used additional methods: POST => /blogs, POST => /posts, POST => /posts/:postId/comments, GET => /comments/:id;

    expect(received).toStrictEqual(expected) // deep equality

    - Expected  - 0
    + Received  + 1

    @@ -9,6 +9,7 @@
        "likesInfo": Object {
          "dislikesCount": 0,
          "likesCount": 1,
          "myStatus": "Like",
        },
    +   "postId": "1687869696834",
      }

      110 |       .catch((error) => handleTestError(error));
      111 |
    > 112 |     expect(itemAfterLikeAction).toStrictEqual(expectedItemWithLike);
          |                                 ^
      113 |   }
      114 | };
      115 |

      at performLikeTestFlow (src/tests/jest/back/testHelpers/performTestsFlow/performTestLikesFlow.ts:112:33)
      at Object.<anonymous> (src/tests/jest/back/describes/likes/commentsLikes-describe-v2.ts:145:7)

  > Homework 11  Comment likes  PUT -> "/comments/:commentId/like-status": create comment then:
   like the comment by user 1;
   dislike the comment by user 1;
   set 'none' status by user 1;
   get the comment after each like by user 1; status 204;  used additional methods: POST => /blogs, POST => /posts, POST => /posts/:postId/comments, GET => /comments/:id;

    expect(received).toStrictEqual(expected) // deep equality

    - Expected  - 0
    + Received  + 1

    @@ -9,6 +9,7 @@
        "likesInfo": Object {
          "dislikesCount": 0,
          "likesCount": 1,
          "myStatus": "Like",
        },
    +   "postId": "1687869697928",
      }

      110 |       .catch((error) => handleTestError(error));
      111 |
    > 112 |     expect(itemAfterLikeAction).toStrictEqual(expectedItemWithLike);
          |                                 ^
      113 |   }
      114 | };
      115 |

      at performLikeTestFlow (src/tests/jest/back/testHelpers/performTestsFlow/performTestLikesFlow.ts:112:33)
      at Object.<anonymous> (src/tests/jest/back/describes/likes/commentsLikes-describe-v2.ts:176:7)

  > Homework 11  Comment likes  PUT -> "/comments/:commentId/like-status": create comment then:
   like the comment by user 1 then get by user 2;
   dislike the comment by user 2 then get by the user 1; status 204;  used additional methods: POST => /blogs, POST => /posts, POST => /posts/:postId/comments, GET => /comments/:id;

    expect(received).toStrictEqual(expected) // deep equality

    - Expected  - 0
    + Received  + 1

    @@ -9,6 +9,7 @@
        "likesInfo": Object {
          "dislikesCount": 0,
          "likesCount": 1,
          "myStatus": "None",
        },
    +   "postId": "1687869699373",
      }

      110 |       .catch((error) => handleTestError(error));
      111 |
    > 112 |     expect(itemAfterLikeAction).toStrictEqual(expectedItemWithLike);
          |                                 ^
      113 |   }
      114 | };
      115 |

      at performLikeTestFlow (src/tests/jest/back/testHelpers/performTestsFlow/performTestLikesFlow.ts:112:33)
      at Object.<anonymous> (src/tests/jest/back/describes/likes/commentsLikes-describe-v2.ts:207:7)

  > Homework 11  Comment likes  GET -> "/posts/:postId/comments": create 6 comments then:
  like comment 1 by user 1, user 2;
  like comment 2 by user 2, user 3;
  dislike comment 3 by user 1;
  like comment 4 by user 1, user 4, user 2, user 3;
  like comment 5 by user 2, dislike by user 3;
  like comment 6 by user 1, dislike by user 2.
  Get the comments by user 1 after all likes
  ; status 200; content: comments array for post with pagination;  used additional methods: POST => /blogs, POST => /posts, POST => /posts/:postId/comments, PUT -> /posts/:postId/like-status;

    Passed queryParams: ""

    Expected: {"pagesCount":1,"page":1,"pageSize":10,"totalCount":6,"items":[{"id":"1687869702551","commentatorInfo":{"userId":"4b6595f2-34c3-436d-a40c-8dec8401067d","userLogin":"6396lg"},"content":"length_21-weqweqweqwq","createdAt":"2023-06-27T12:41:42.551Z","likesInfo":{"likesCount":1,"dislikesCount":1,"myStatus":"Like"}},{"id":"1687869702333","commentatorInfo":{"userId":"4b6595f2-34c3-436d-a40c-8dec8401067d","userLogin":"6396lg"},"content":"length_21-weqweqweqwq","createdAt":"2023-06-27T12:41:42.333Z","likesInfo":{"likesCount":1,"dislikesCount":1,"myStatus":"None"}},{"id":"1687869702098","commentatorInfo":{"userId":"4b6595f2-34c3-436d-a40c-8dec8401067d","userLogin":"6396lg"},"content":"length_21-weqweqweqwq","createdAt":"2023-06-27T12:41:42.098Z","likesInfo":{"likesCount":4,"dislikesCount":0,"myStatus":"Like"}},{"id":"1687869701869","commentatorInfo":{"userId":"4b6595f2-34c3-436d-a40c-8dec8401067d","userLogin":"6396lg"},"content":"length_21-weqweqweqwq","createdAt":"2023-06-27T12:41:41.869Z","likesInfo":{"likesCount":0,"dislikesCount":1,"myStatus":"Dislike"}},{"id":"1687869701226","commentatorInfo":{"userId":"4b6595f2-34c3-436d-a40c-8dec8401067d","userLogin":"6396lg"},"content":"length_21-weqweqweqwq","createdAt":"2023-06-27T12:41:41.226Z","likesInfo":{"likesCount":2,"dislikesCount":0,"myStatus":"None"}},{"id":"1687869700970","commentatorInfo":{"userId":"4b6595f2-34c3-436d-a40c-8dec8401067d","userLogin":"6396lg"},"content":"length_21-weqweqweqwq","createdAt":"2023-06-27T12:41:40.970Z","likesInfo":{"likesCount":2,"dislikesCount":0,"myStatus":"Like"}}]}

    Received: {"pagesCount":1,"page":1,"pageSize":10,"totalCount":6,"items":[{"id":"1687869702551","postId":"1687869700742","content":"length_21-weqweqweqwq","commentatorInfo":{"userId":"4b6595f2-34c3-436d-a40c-8dec8401067d","userLogin":"6396lg"},"createdAt":"2023-06-27T12:41:42.551Z"},{"id":"1687869702333","postId":"1687869700742","content":"length_21-weqweqweqwq","commentatorInfo":{"userId":"4b6595f2-34c3-436d-a40c-8dec8401067d","userLogin":"6396lg"},"createdAt":"2023-06-27T12:41:42.333Z"},{"id":"1687869702098","postId":"1687869700742","content":"length_21-weqweqweqwq","commentatorInfo":{"userId":"4b6595f2-34c3-436d-a40c-8dec8401067d","userLogin":"6396lg"},"createdAt":"2023-06-27T12:41:42.098Z"},{"id":"1687869701869","postId":"1687869700742","content":"length_21-weqweqweqwq","commentatorInfo":{"userId":"4b6595f2-34c3-436d-a40c-8dec8401067d","userLogin":"6396lg"},"createdAt":"2023-06-27T12:41:41.869Z"},{"id":"1687869701226","postId":"1687869700742","content":"length_21-weqweqweqwq","commentatorInfo":{"userId":"4b6595f2-34c3-436d-a40c-8dec8401067d","userLogin":"6396lg"},"createdAt":"2023-06-27T12:41:41.226Z"},{"id":"1687869700970","postId":"1687869700742","content":"length_21-weqweqweqwq","commentatorInfo":{"userId":"4b6595f2-34c3-436d-a40c-8dec8401067d","userLogin":"6396lg"},"createdAt":"2023-06-27T12:41:40.970Z"}]}

    Attention: "addedAt": Any<String> is equal to any date string, don't worry about highlighting this field

    - Expected
    + Received

    @@ -6,85 +6,61 @@
              "userLogin": "6396lg",
            },
            "content": "length_21-weqweqweqwq",
            "createdAt": "2023-06-27T12:41:42.551Z",
            "id": "1687869702551",
    -       "likesInfo": Object {
    -         "dislikesCount": 1,
    -         "likesCount": 1,
    -         "myStatus": "Like",
    -       },
    +       "postId": "1687869700742",
          },
          Object {
            "commentatorInfo": Object {
              "userId": "4b6595f2-34c3-436d-a40c-8dec8401067d",
              "userLogin": "6396lg",
            },
            "content": "length_21-weqweqweqwq",
            "createdAt": "2023-06-27T12:41:42.333Z",
            "id": "1687869702333",
    -       "likesInfo": Object {
    -         "dislikesCount": 1,
    -         "likesCount": 1,
    -         "myStatus": "None",
    -       },
    +       "postId": "1687869700742",
          },
          Object {
            "commentatorInfo": Object {
              "userId": "4b6595f2-34c3-436d-a40c-8dec8401067d",
              "userLogin": "6396lg",
            },
            "content": "length_21-weqweqweqwq",
            "createdAt": "2023-06-27T12:41:42.098Z",
            "id": "1687869702098",
    -       "likesInfo": Object {
    -         "dislikesCount": 0,
    -         "likesCount": 4,
    -         "myStatus": "Like",
    -       },
    +       "postId": "1687869700742",
          },
          Object {
            "commentatorInfo": Object {
              "userId": "4b6595f2-34c3-436d-a40c-8dec8401067d",
              "userLogin": "6396lg",
            },
            "content": "length_21-weqweqweqwq",
            "createdAt": "2023-06-27T12:41:41.869Z",
            "id": "1687869701869",
    -       "likesInfo": Object {
    -         "dislikesCount": 1,
    -         "likesCount": 0,
    -         "myStatus": "Dislike",
    -       },
    +       "postId": "1687869700742",
          },
          Object {
            "commentatorInfo": Object {
              "userId": "4b6595f2-34c3-436d-a40c-8dec8401067d",
              "userLogin": "6396lg",
            },
            "content": "length_21-weqweqweqwq",
            "createdAt": "2023-06-27T12:41:41.226Z",
            "id": "1687869701226",
    -       "likesInfo": Object {
    -         "dislikesCount": 0,
    -         "likesCount": 2,
    -         "myStatus": "None",
    -       },
    +       "postId": "1687869700742",
          },
          Object {
            "commentatorInfo": Object {
              "userId": "4b6595f2-34c3-436d-a40c-8dec8401067d",
              "userLogin": "6396lg",
            },
            "content": "length_21-weqweqweqwq",
            "createdAt": "2023-06-27T12:41:40.970Z",
            "id": "1687869700970",
    -       "likesInfo": Object {
    -         "dislikesCount": 0,
    -         "likesCount": 2,
    -         "myStatus": "Like",
    -       },
    +       "postId": "1687869700742",
          },
        ],
        "page": 1,
        "pageSize": 10,
        "pagesCount": 1,

      105 |
      106 |     if (expectedData) {
    > 107 |       expect(data).toBeEqualWithQueryParams(expectedData, queryParams, withDiffPrint);
          |                    ^
      108 |     }
      109 |   }
      110 | };

      at performQueryParamsChecker (src/tests/jest/back/testHelpers/performCheckers.ts:107:20)
      at Object.<anonymous> (src/tests/jest/back/describes/likes/commentsLikes-describe-v2.ts:259:7)

  > Homework 11  Comment likes  Comment like body validation  PUT -> "/comments/:commentId/like-status": should return error if passed body is incorrect; status 400;  used additional methods: POST -> /blogs, POST -> /posts, POST -> /comments;



    Tested endpoint: comments/1687869707300/like-status

    Tested method: PUT

    Expected status: 400

    Received status: 204

    Passed body: {"likeStatus":""}

    Expected data: { errorsMessages: [{ message: Any<String>, field: "likeStatus" }] }

    Received data: ""

      40 |     }
      41 |
    > 42 |     expect(response).toBeError(400, incorrectFields, requestBody, {
         |                      ^
      43 |       endpoint: url,
      44 |       method,
      45 |     });

      at performTestsWithIncorrectBody (src/tests/jest/back/testHelpers/performTestsWithIncorrectBody.ts:42:22)
      at Object.<anonymous> (src/tests/jest/back/describes/likes/likes-body-validation-describe.ts:79:7)
