  > Homework 12
  Posts likes
  POST -> "/blogs/:blogId/posts": should create new post for specific blog;
  status 201; content: created post;  used additional methods: POST -> /blogs, GET -> /posts/:id;

    expect(received).toEqual(expected) // deep equality

    - Expected  - 6
    + Received  + 0

      Object {
        "blogId": Any<String>,
        "blogName": Any<String>,
        "content": Any<String>,
        "createdAt": StringMatching /\d{4}-[01]\d-[0-3]\dT[0-2]\d:[0-5]\d:[0-5]\d\.\d+([+-][0-2]\d:[0-5]\d|Z)/,
    -   "extendedLikesInfo": Object {
    -     "dislikesCount": Any<Number>,
    -     "likesCount": Any<Number>,
    -     "myStatus": StringMatching /^Like$|^Dislike$|^None$/,
    -     "newestLikes": Any<Array>,
    -   },
        "id": Any<String>,
        "shortDescription": Any<String>,
        "title": Any<String>,
      }

      63 |   expectedStatus = 201,
      64 | }: IPerformCreateTestFlowPayload<T>) => {
    > 65 |   expect(createEntityResponseData).toEqual(entitySchema);
         |                                    ^
      66 |   expect(createEntityResponseStatus).toBe(expectedStatus);
      67 |
      68 |   const { data: getByIdResponseData } = await axiosInstance

      at performPOSTTestFlow (src/tests/jest/back/testHelpers/performTestsFlow/performTestsFlow.ts:65:36)
      at Object.<anonymous> (src/tests/jest/back/describes/blogs/blogs-with-pagination-describe.ts:97:32)
          at runMicrotasks (<anonymous>)

  > Homework 12  Posts likes  PUT -> "/posts/:postId/like-status": create post then:
   like the post by user 1, user 2, user 3, user 4.
   get the post after each like by user 1.
   NewestLikes should be sorted in descending; status 204;  used additional methods: POST => /blogs, POST => /posts, GET => /posts/:id;

    expect(received).toStrictEqual(expected) // deep equality

    - Expected  - 4
    + Received  + 4

    @@ -8,17 +8,17 @@
          "likesCount": 2,
          "myStatus": "Like",
          "newestLikes": Array [
            Object {
              "addedAt": Any<String>,
    -         "login": "1421lg",
    -         "userId": "fc605ce4-903b-433f-b8df-457d9028da44",
    +         "login": "1420lg",
    +         "userId": "3f124311-4b46-4067-ae90-bc85c248a76a",
            },
            Object {
              "addedAt": Any<String>,
    -         "login": "1420lg",
    -         "userId": "3f124311-4b46-4067-ae90-bc85c248a76a",
    +         "login": "1421lg",
    +         "userId": "fc605ce4-903b-433f-b8df-457d9028da44",
            },
          ],
        },
        "id": "1689909088962",
        "shortDescription": "description",

      110 |       .catch((error) => handleTestError(error));
      111 |
    > 112 |     expect(itemAfterLikeAction).toStrictEqual(expectedItemWithLike);
          |                                 ^
      113 |   }
      114 | };
      115 |

      at performLikeTestFlow (src/tests/jest/back/testHelpers/performTestsFlow/performTestLikesFlow.ts:112:33)
          at runMicrotasks (<anonymous>)
      at Object.<anonymous> (src/tests/jest/back/describes/likes/postLikes-describe-v2.ts:84:7)

  > Homework 12  Posts likes  PUT -> "/posts/:postId/like-status": create post then:
   dislike the post by user 1, user 2;
   like the post by user 3;
   get the post after each like by user 1; status 204;  used additional methods: POST => /blogs, POST => /posts, GET => /posts/:id;

    expect(received).toStrictEqual(expected) // deep equality

    - Expected  - 1
    + Received  + 7

    @@ -5,11 +5,17 @@
        "createdAt": "2023-07-21T03:11:30.210Z",
        "extendedLikesInfo": Object {
          "dislikesCount": 1,
          "likesCount": 0,
          "myStatus": "Dislike",
    -     "newestLikes": Array [],
    +     "newestLikes": Array [
    +       Object {
    +         "addedAt": "2023-07-21T03:11:30.407Z",
    +         "login": "1420lg",
    +         "userId": "3f124311-4b46-4067-ae90-bc85c248a76a",
    +       },
    +     ],
        },
        "id": "1689909090210",
        "shortDescription": "description",
        "title": "post title",
      }

      110 |       .catch((error) => handleTestError(error));
      111 |
    > 112 |     expect(itemAfterLikeAction).toStrictEqual(expectedItemWithLike);
          |                                 ^
      113 |   }
      114 | };
      115 |

      at performLikeTestFlow (src/tests/jest/back/testHelpers/performTestsFlow/performTestLikesFlow.ts:112:33)
          at runMicrotasks (<anonymous>)
      at Object.<anonymous> (src/tests/jest/back/describes/likes/postLikes-describe-v2.ts:115:7)

  > Homework 12  Posts likes  PUT -> "/posts/:postId/like-status": create post then:
   like the post by user 1;
   dislike the post by user 1;
   set 'none' status by user 1;
   get the post after each like by user 1; status 204;  used additional methods: POST => /blogs, POST => /posts, GET => /posts/:id;

    expect(received).toStrictEqual(expected) // deep equality

    - Expected  - 1
    + Received  + 7

    @@ -5,11 +5,17 @@
        "createdAt": "2023-07-21T03:11:32.250Z",
        "extendedLikesInfo": Object {
          "dislikesCount": 1,
          "likesCount": 0,
          "myStatus": "Dislike",
    -     "newestLikes": Array [],
    +     "newestLikes": Array [
    +       Object {
    +         "addedAt": "2023-07-21T03:11:33.043Z",
    +         "login": "1420lg",
    +         "userId": "3f124311-4b46-4067-ae90-bc85c248a76a",
    +       },
    +     ],
        },
        "id": "1689909092250",
        "shortDescription": "description",
        "title": "post title",
      }

      110 |       .catch((error) => handleTestError(error));
      111 |
    > 112 |     expect(itemAfterLikeAction).toStrictEqual(expectedItemWithLike);
          |                                 ^
      113 |   }
      114 | };
      115 |

      at performLikeTestFlow (src/tests/jest/back/testHelpers/performTestsFlow/performTestLikesFlow.ts:112:33)
          at runMicrotasks (<anonymous>)
      at Object.<anonymous> (src/tests/jest/back/describes/likes/postLikes-describe-v2.ts:177:7)

  > Homework 12  Posts likes  PUT -> "/posts/:postId/like-status": create post then:
   like the post by user 1 then get by user 2;
   dislike the post by user 2 then get by the user 1; status 204;  used additional methods: POST => /blogs, POST => /posts, GET => /posts/:id;

    expect(received).toStrictEqual(expected) // deep equality

    - Expected  - 0
    + Received  + 5

    @@ -11,10 +11,15 @@
            Object {
              "addedAt": Any<String>,
              "login": "1420lg",
              "userId": "3f124311-4b46-4067-ae90-bc85c248a76a",
            },
    +       Object {
    +         "addedAt": "2023-07-21T03:11:34.293Z",
    +         "login": "1421lg",
    +         "userId": "fc605ce4-903b-433f-b8df-457d9028da44",
    +       },
          ],
        },
        "id": "1689909093690",
        "shortDescription": "description",
        "title": "post title",

      110 |       .catch((error) => handleTestError(error));
      111 |
    > 112 |     expect(itemAfterLikeAction).toStrictEqual(expectedItemWithLike);
          |                                 ^
      113 |   }
      114 | };
      115 |

      at performLikeTestFlow (src/tests/jest/back/testHelpers/performTestsFlow/performTestLikesFlow.ts:112:33)
          at runMicrotasks (<anonymous>)
      at Object.<anonymous> (src/tests/jest/back/describes/likes/postLikes-describe-v2.ts:208:7)

  > Homework 12  Posts likes  GET -> "/posts": create 6 posts then:
  like post 1 by user 1, user 2;
  like post 2 by user 2, user 3;
  dislike post 3 by user 1;
  like post 4 by user 1, user 4, user 2, user 3;
  like post 5 by user 2, dislike by user 3;
  like post 6 by user 1, dislike by user 2.
  Get the posts by user 1 after all likes
  NewestLikes should be sorted in descending; status 200; content: posts array with pagination;  used additional methods: POST -> /blogs, POST -> /posts, PUT -> posts/:postId/like-status;

    Passed queryParams: ""

    Expected: {"pagesCount":1,"page":1,"pageSize":10,"totalCount":6,"items":[{"id":"1689909103307","createdAt":"2023-07-21T03:11:43.307Z","blogName":"new blog","content":"new post content","shortDescription":"description","title":"post title","blogId":"1689909101881","extendedLikesInfo":{"likesCount":1,"dislikesCount":1,"myStatus":"Like","newestLikes":[{"addedAt":Any<String>,"userId":"b6637b89-1a3d-42e3-80d9-6164ee3cfc81","login":"4864lg"}]}},{"id":"1689909103106","createdAt":"2023-07-21T03:11:43.106Z","blogName":"new blog","content":"new post content","shortDescription":"description","title":"post title","blogId":"1689909101881","extendedLikesInfo":{"likesCount":1,"dislikesCount":1,"myStatus":"None","newestLikes":[{"addedAt":Any<String>,"userId":"db69684f-29f8-4922-b92d-01b47008d9d5","login":"4865lg"}]}},{"id":"1689909102912","createdAt":"2023-07-21T03:11:42.912Z","blogName":"new blog","content":"new post content","shortDescription":"description","title":"post title","blogId":"1689909101881","extendedLikesInfo":{"likesCount":4,"dislikesCount":0,"myStatus":"Like","newestLikes":[{"addedAt":Any<String>,"userId":"59e66133-69d1-46da-9e67-b60b4a20de97","login":"4866lg"},{"addedAt":Any<String>,"userId":"db69684f-29f8-4922-b92d-01b47008d9d5","login":"4865lg"},{"addedAt":Any<String>,"userId":"d5bc50fd-bd22-4fc3-9cc6-a948e0ff93e2","login":"4867lg"}]}},{"id":"1689909102489","createdAt":"2023-07-21T03:11:42.489Z","blogName":"new blog","content":"new post content","shortDescription":"description","title":"post title","blogId":"1689909101881","extendedLikesInfo":{"likesCount":0,"dislikesCount":1,"myStatus":"Dislike","newestLikes":[]}},{"id":"1689909102263","createdAt":"2023-07-21T03:11:42.263Z","blogName":"new blog","content":"new post content","shortDescription":"description","title":"post title","blogId":"1689909101881","extendedLikesInfo":{"likesCount":2,"dislikesCount":0,"myStatus":"None","newestLikes":[{"addedAt":Any<String>,"userId":"59e66133-69d1-46da-9e67-b60b4a20de97","login":"4866lg"},{"addedAt":Any<String>,"userId":"db69684f-29f8-4922-b92d-01b47008d9d5","login":"4865lg"}]}},{"id":"1689909102064","createdAt":"2023-07-21T03:11:42.064Z","blogName":"new blog","content":"new post content","shortDescription":"description","title":"post title","blogId":"1689909101881","extendedLikesInfo":{"likesCount":2,"dislikesCount":0,"myStatus":"Like","newestLikes":[{"addedAt":Any<String>,"userId":"db69684f-29f8-4922-b92d-01b47008d9d5","login":"4865lg"},{"addedAt":Any<String>,"userId":"b6637b89-1a3d-42e3-80d9-6164ee3cfc81","login":"4864lg"}]}}]}

    Received: {"pagesCount":1,"page":1,"pageSize":10,"totalCount":6,"items":[{"id":"1689909103307","title":"post title","shortDescription":"description","content":"new post content","blogId":"1689909101881","blogName":"new blog","createdAt":"2023-07-21T03:11:43.307Z"},{"id":"1689909103106","title":"post title","shortDescription":"description","content":"new post content","blogId":"1689909101881","blogName":"new blog","createdAt":"2023-07-21T03:11:43.106Z"},{"id":"1689909102912","title":"post title","shortDescription":"description","content":"new post content","blogId":"1689909101881","blogName":"new blog","createdAt":"2023-07-21T03:11:42.912Z"},{"id":"1689909102489","title":"post title","shortDescription":"description","content":"new post content","blogId":"1689909101881","blogName":"new blog","createdAt":"2023-07-21T03:11:42.489Z"},{"id":"1689909102263","title":"post title","shortDescription":"description","content":"new post content","blogId":"1689909101881","blogName":"new blog","createdAt":"2023-07-21T03:11:42.263Z"},{"id":"1689909102064","title":"post title","shortDescription":"description","content":"new post content","blogId":"1689909101881","blogName":"new blog","createdAt":"2023-07-21T03:11:42.064Z"}]}

    Attention: "addedAt": Any<String> is equal to any date string, don't worry about highlighting this field

    - Expected
    + Received

    @@ -3,141 +3,55 @@
          Object {
            "blogId": "1689909101881",
            "blogName": "new blog",
            "content": "new post content",
            "createdAt": "2023-07-21T03:11:43.307Z",
    -       "extendedLikesInfo": Object {
    -         "dislikesCount": 1,
    -         "likesCount": 1,
    -         "myStatus": "Like",
    -         "newestLikes": Array [
    -           Object {
    -             "addedAt": Any<String>,
    -             "login": "4864lg",
    -             "userId": "b6637b89-1a3d-42e3-80d9-6164ee3cfc81",
    -           },
    -         ],
    -       },
            "id": "1689909103307",
            "shortDescription": "description",
            "title": "post title",
          },
          Object {
            "blogId": "1689909101881",
            "blogName": "new blog",
            "content": "new post content",
            "createdAt": "2023-07-21T03:11:43.106Z",
    -       "extendedLikesInfo": Object {
    -         "dislikesCount": 1,
    -         "likesCount": 1,
    -         "myStatus": "None",
    -         "newestLikes": Array [
    -           Object {
    -             "addedAt": Any<String>,
    -             "login": "4865lg",
    -             "userId": "db69684f-29f8-4922-b92d-01b47008d9d5",
    -           },
    -         ],
    -       },
            "id": "1689909103106",
            "shortDescription": "description",
            "title": "post title",
          },
          Object {
            "blogId": "1689909101881",
            "blogName": "new blog",
            "content": "new post content",
            "createdAt": "2023-07-21T03:11:42.912Z",
    -       "extendedLikesInfo": Object {
    -         "dislikesCount": 0,
    -         "likesCount": 4,
    -         "myStatus": "Like",
    -         "newestLikes": Array [
    -           Object {
    -             "addedAt": Any<String>,
    -             "login": "4866lg",
    -             "userId": "59e66133-69d1-46da-9e67-b60b4a20de97",
    -           },
    -           Object {
    -             "addedAt": Any<String>,
    -             "login": "4865lg",
    -             "userId": "db69684f-29f8-4922-b92d-01b47008d9d5",
    -           },
    -           Object {
    -             "addedAt": Any<String>,
    -             "login": "4867lg",
    -             "userId": "d5bc50fd-bd22-4fc3-9cc6-a948e0ff93e2",
    -           },
    -         ],
    -       },
            "id": "1689909102912",
            "shortDescription": "description",
            "title": "post title",
          },
          Object {
            "blogId": "1689909101881",
            "blogName": "new blog",
            "content": "new post content",
            "createdAt": "2023-07-21T03:11:42.489Z",
    -       "extendedLikesInfo": Object {
    -         "dislikesCount": 1,
    -         "likesCount": 0,
    -         "myStatus": "Dislike",
    -         "newestLikes": Array [],
    -       },
            "id": "1689909102489",
            "shortDescription": "description",
            "title": "post title",
          },
          Object {
            "blogId": "1689909101881",
            "blogName": "new blog",
            "content": "new post content",
            "createdAt": "2023-07-21T03:11:42.263Z",
    -       "extendedLikesInfo": Object {
    -         "dislikesCount": 0,
    -         "likesCount": 2,
    -         "myStatus": "None",
    -         "newestLikes": Array [
    -           Object {
    -             "addedAt": Any<String>,
    -             "login": "4866lg",
    -             "userId": "59e66133-69d1-46da-9e67-b60b4a20de97",
    -           },
    -           Object {
    -             "addedAt": Any<String>,
    -             "login": "4865lg",
    -             "userId": "db69684f-29f8-4922-b92d-01b47008d9d5",
    -           },
    -         ],
    -       },
            "id": "1689909102263",
            "shortDescription": "description",
            "title": "post title",
          },
          Object {
            "blogId": "1689909101881",
            "blogName": "new blog",
            "content": "new post content",
            "createdAt": "2023-07-21T03:11:42.064Z",
    -       "extendedLikesInfo": Object {
    -         "dislikesCount": 0,
    -         "likesCount": 2,
    -         "myStatus": "Like",
    -         "newestLikes": Array [
    -           Object {
    -             "addedAt": Any<String>,
    -             "login": "4865lg",
    -             "userId": "db69684f-29f8-4922-b92d-01b47008d9d5",
    -           },
    -           Object {
    -             "addedAt": Any<String>,
    -             "login": "4864lg",
    -             "userId": "b6637b89-1a3d-42e3-80d9-6164ee3cfc81",
    -           },
    -         ],
    -       },
            "id": "1689909102064",
            "shortDescription": "description",
            "title": "post title",
          },
        ],

      105 |
      106 |     if (expectedData) {
    > 107 |       expect(data).toBeEqualWithQueryParams(expectedData, queryParams, withDiffPrint);
          |                    ^
      108 |     }
      109 |   }
      110 | };

      at performQueryParamsChecker (src/tests/jest/back/testHelpers/performCheckers.ts:107:20)
          at runMicrotasks (<anonymous>)
      at Object.<anonymous> (src/tests/jest/back/describes/likes/postLikes-describe-v2.ts:254:7)

  > Homework 12  Posts likes  GET -> "/blogs/:blogId/posts": create 6 posts then:
  like post 1 by user 1, user 2;
  like post 2 by user 2, user 3;
  dislike post 3 by user 1;
  like post 4 by user 1, user 4, user 2, user 3;
  like post 5 by user 2, dislike by user 3;
  like post 6 by user 1, dislike by user 2.
  Get the posts by user 1 after all likes
  NewestLikes should be sorted in descending; status 200; content: posts array with pagination;  used additional methods: POST -> /blogs, POST -> /blogs/:blogId/posts, PUT -> posts/:postId/like-status;



    Expected: ArrayContaining [{"blogId": Any<String>, "blogName": Any<String>, "content": Any<String>, "createdAt": StringMatching /\d{4}-[01]\d-[0-3]\dT[0-2]\d:[0-5]\d:[0-5]\d\.\d+([+-][0-2]\d:[0-5]\d|Z)/, "extendedLikesInfo": {"dislikesCount": Any<Number>, "likesCount": Any<Number>, "myStatus": StringMatching /^Like$|^Dislike$|^None$/, "newestLikes": Any<Array>}, "id": Any<String>, "shortDescription": Any<String>, "title": Any<String>}]

    Received: [{"id":"1689909106884","createdAt":"2023-07-21T03:11:46.884Z","blogName":"new blog","blogId":"1689909106684","content":"new post content","shortDescription":"description","title":"post title"},{"id":"1689909107226","createdAt":"2023-07-21T03:11:47.226Z","blogName":"new blog","blogId":"1689909106684","content":"new post content","shortDescription":"description","title":"post title"},{"id":"1689909107420","createdAt":"2023-07-21T03:11:47.420Z","blogName":"new blog","blogId":"1689909106684","content":"new post content","shortDescription":"description","title":"post title"},{"id":"1689909107608","createdAt":"2023-07-21T03:11:47.608Z","blogName":"new blog","blogId":"1689909106684","content":"new post content","shortDescription":"description","title":"post title"},{"id":"1689909107817","createdAt":"2023-07-21T03:11:47.817Z","blogName":"new blog","blogId":"1689909106684","content":"new post content","shortDescription":"description","title":"post title"},{"id":"1689909108006","createdAt":"2023-07-21T03:11:48.006Z","blogName":"new blog","blogId":"1689909106684","content":"new post content","shortDescription":"description","title":"post title"}]

    Wrong entity: {"id":"1689909106884","createdAt":"2023-07-21T03:11:46.884Z","blogName":"new blog","blogId":"1689909106684","content":"new post content","shortDescription":"description","title":"post title"}

      297 |       }).catch((error) => handleTestError(error));
      298 |
    > 299 |       expect(create6PostsResult).toBeStrictObjectsArray(postSchema);
          |                                  ^
      300 |
      301 |       const posts6WithLikes = await likeSeveralItemsSeveralTimes({
      302 |         //userWhoGet should be loggedUsers[0]

      at Object.<anonymous> (src/tests/jest/back/describes/likes/postLikes-describe-v2.ts:299:34)
          at runMicrotasks (<anonymous>)
